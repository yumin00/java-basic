package overriding;

/*
상속 받은 기능을 자식이 재정하의하는 메서드를 사용할 수 있다.
이를 오버라이딩 이라고 한다.
 */

public class ElectricCar extends Car {
    @Override
    public void move() {
        System.out.println("전기차를 빠르게 이동합니다.");
    }

    public void charge() {
        System.out.println("충전합니다.");
    }
}

/*
@를 어노테이션이라고 한다.
어노테이션은 주석과 비슷한데, 프로그램이 읽을 수 있는 주석이라고 생각하면 된다.
 */

/*
오버로딩 vs 오버라이팅

오버로딩: 메서드 이름이 같고 파라미터가 다른 경우
오버라이딩: 상속받은 메서드를 재저의하는 것
 */

/*
메서드 오버라이딩 조건
- 메서드 이름이 동일해야 한다.
- 매개변수가 동일해야함
- 반환 타입이 동일해야함
- 상위 클래스의 메서드가 protected로 선언되어 있으면, 하위 클래스에서 이를 public, protected로 오버라이드할 수 있지만 private, default로 오버라이드할 수 없다.
- 상위 클래스의 메서드보다 더 많은 체크 예외를 throws로 선언할 수 없다.
- static, final, private 키워드가 붙은 메서드는 오버라이딩 될 수 없다.
    - static: 클래스 레벨에서 작동하므로 인스턴스 레벨에서 사용하는 오버라이딩이 의미가 없다.
    - private: 해당 클래스에서만 접근할 수 있기 때문에 하위 클래스에서는 보이지 않음. 따라서 오버라이딩할 수 없다.
- 생성자 오버라이딩: 생성자는 오버라이딩할 수 없음.
 */